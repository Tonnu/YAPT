/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package yapt.GUI;

import java.awt.CardLayout;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import yapt.GAME.Session;
import yapt.RMI.IPongGame;
import yapt.RMI.ISession;
import yapt.RMI.IYAPTServer;

/**
 *
 * @author tonnu
 */
public class LobbyPanel extends javax.swing.JPanel {

    private String username;
    private IYAPTServer server;
    private Session sessionImpl;

    private YAPTPanel gamePanel;
    private CardLayout cl;
    private JPanel cards;
    private List<ISession> onlinePlayers;
    private DefaultListModel players, pongGames;

    /**
     * Creates new form LobbyPanel
     */
    LobbyPanel(CardLayout cl) {
        initComponents();
        this.cl = cl;

        onlinePlayers = new ArrayList<>();
        players = new DefaultListModel<>();
        pongGames = new DefaultListModel<>();

    }

    public Session getSessionImpl() {
        return sessionImpl;
    }

    public void setOnlinePlayers(Collection<ISession> onlinePlayers) throws RemoteException {
        players.clear();
        for (ISession is : onlinePlayers) {
            players.addElement(is.getUsername());
        }
        this.lst_onlinePlayers.setModel(players);
    }

    public void newMessage(String chatMessage) {
        //System.out.println("Someone is calling newMessage()");
        this.jTextArea1.append(chatMessage + "\n");
    }

    public void setGameList(List<String> newGameList) throws RemoteException {
        pongGames.clear();
        for (String _game : newGameList) {
            pongGames.addElement(_game);
        }
        this.lst_currentGames.setModel(pongGames);
    }

    public void addPlayer(ISession player) throws RemoteException {
        this.players.addElement(player.getUsername());
        this.lst_onlinePlayers.setModel(players);

    }

    public void removeGame(IPongGame game) {
        this.pongGames.removeElement("");
    }

    public void removePlayer(ISession player) {
        this.onlinePlayers.remove(player);
    }

    public void tryLogin(String serverAddress, String username, YAPTPanel gamepanel, JPanel cards) throws RemoteException, NotBoundException, MalformedURLException {
        this.username = username;
        this.gamePanel = gamepanel;
        this.cards = cards;
        //unwise
        System.setSecurityManager(null);
        //String serverAddress = (GameFrame.ARGS.length < 1) ? "localhost" : GameFrame.ARGS[0];
        //aserverAddress = "188.226.136.184";
        //when trying to find a game, try to connect to server first

        //register clientStub at remote server
        //Registry remoteRegistry = LocateRegistry.getRegistry(serverAddress, RMI_PORT);
        server = (IYAPTServer) Naming.lookup(IYAPTServer.class.getSimpleName());
        //server = (IYAPTServer) remoteRegistry.lookup(IYAPTServer.class.getSimpleName());
        //lobby = (ILobby) remoteRegistry.lookup(ILobby.class.getSimpleName());
        //create RMI-stub for a ClientImpl
        //lobby = (ILobby) Naming.lookup(ILobby.class.getSimpleName());

        for (Iterator it = server.getLobby().getOthers().iterator(); it.hasNext();) {
            Object object = it.next();
            ISession _s = (ISession) object;

            if (_s.getUsername().equals(username)) {
                JOptionPane.showMessageDialog((Component) null, "Someone is already currently logged in with this username. Please pick another one.",
                        "alert", JOptionPane.OK_OPTION);
                throw new RemoteException("Username taken");
            }
        }
        sessionImpl = new Session(username, server, gamepanel, this);
        final ISession sessionStub = (ISession) UnicastRemoteObject.exportObject(sessionImpl, 0);

        server.register(sessionStub);

        //start pushing messages to the server
        server.onMessage("Connected", sessionImpl);
    }

    public void showPanel() {
        this.cl.show(cards, "Lobby");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        lst_currentGames = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        lst_onlinePlayers = new javax.swing.JList();
        btn_joinGame = new javax.swing.JButton();
        btn_startGame = new javax.swing.JButton();
        btn_Challenge = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        lst_currentGames.setModel(lst_currentGames.getModel());
        jScrollPane2.setViewportView(lst_currentGames);

        lst_onlinePlayers.setModel(lst_onlinePlayers.getModel());
        jScrollPane3.setViewportView(lst_onlinePlayers);

        btn_joinGame.setText("Spectate");
        btn_joinGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_joinGameActionPerformed(evt);
            }
        });

        btn_startGame.setLabel("Start New Game");
        btn_startGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_startGameActionPerformed(evt);
            }
        });

        btn_Challenge.setText("Challenge Player");
        btn_Challenge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ChallengeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1256, Short.MAX_VALUE)
                    .addComponent(jTextField1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_startGame, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(184, 184, 184)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(306, 306, 306)
                .addComponent(btn_joinGame, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_Challenge)
                .addGap(286, 286, 286))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn_startGame))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_joinGame)
                    .addComponent(btn_Challenge))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Attempts to join the selected game as a spectator.
     *
     * @param evt
     */
    private void btn_joinGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_joinGameActionPerformed
        if (this.lst_currentGames.getSelectedIndex() != -1) {
            try {
                this.cl.show(cards, "Game");
                IPongGame spectatingGame = null;
                for (IPongGame game : this.server.getCurrentGames()) {
                    if (game.getGameDetails().equals(this.lst_currentGames.getSelectedValue())) {
                        spectatingGame = game;
                        System.out.println("found game");
                        break;
                    }
                }
                if (spectatingGame != null) {
                    this.gamePanel.joinGameAsSpectator(sessionImpl, spectatingGame, cards);
                }
            } catch (RemoteException ex) {
                Logger.getLogger(LobbyPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btn_joinGameActionPerformed

    /**
     * Handles the sending of chat messages in the lobby. When a user presses
     * the "ENTER" key and the message in the messagefield is NOT empty, the
     * message will be sent to all other clients in the lobby.
     *
     * @param evt
     */
    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && !jTextField1.getText().equals("")) {
            try {
                this.sessionImpl.onMessage("SendPublicChatMessage", username + ": " + jTextField1.getText());
                this.jTextField1.setText("");
            } catch (RemoteException ex) {
                Logger.getLogger(LobbyPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTextField1KeyReleased

    /**
     * Sends a Looking For Game request to the server. Once another player has
     * been found, a game will commence.
     *
     * @param evt
     */
    private void btn_startGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_startGameActionPerformed
        try {
            this.cl.show(cards, "Game");
            this.gamePanel.lookingForGame(sessionImpl, cards);
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(LobbyPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_startGameActionPerformed

    /**
     * Challenges the selected player to a game. The opponent will recieve a
     * popup containing a request for a new pong game.
     *
     * @param evt
     */
    private void btn_ChallengeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ChallengeActionPerformed
        if (this.lst_onlinePlayers.getSelectedIndex() != -1) {
            try {
                ISession opponent = this.sessionImpl.getplayers((String) this.lst_onlinePlayers.getSelectedValue());
                if (opponent.getUsername().equals(this.sessionImpl.getUsername())) {
                    JOptionPane.showMessageDialog((Component) null, "You cannot challenge yourself to a game... :-(",
                            "alert", JOptionPane.OK_OPTION);
                } else {
                    this.sessionImpl.challengePlayer(opponent);
                    this.cl.show(cards, "Game");
                    this.gamePanel.challenge(sessionImpl, cards);
                }
            } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                Logger.getLogger(LobbyPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public int spawnChallengeRequest() {
        try {
            int result = JOptionPane.showConfirmDialog((Component) null, "Someone has requested to play a game with you! Accept?",
                    "alert", JOptionPane.OK_CANCEL_OPTION);
            System.out.println("Dialog result was " + result);
            if (result == 0) {
                System.out.println("Accepted challenge");
                this.cl.show(cards, "Game");
                this.gamePanel.lookingForGame(sessionImpl, cards);
                return result;
            } else {
                System.out.println("Did not accept challenge");

            }
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(LobbyPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        return 0;

    }//GEN-LAST:event_btn_ChallengeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Challenge;
    private javax.swing.JButton btn_joinGame;
    private javax.swing.JButton btn_startGame;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JList lst_currentGames;
    private javax.swing.JList lst_onlinePlayers;
    // End of variables declaration//GEN-END:variables

}
